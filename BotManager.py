import threading
from datetime import datetime
from dateutil.relativedelta import relativedelta
import telebot
from telebot import types
from JobSearch import JobSearch
from Request import Request
from Stage import STAGE
from UniqueVacancy import UniqueVacancy
from Vacancy import format_unique_vacancy, send_job_offer_instructions
from config import categories, programming_languages, technical_specialties, nontechnical_specialties, positions, \
    cities, headers

def get_end_subscription_date():
    current_date = datetime.now().date()
    return current_date + relativedelta(months=1)

class BotManager:
    def __init__(self, token, payments_token, db_manager, user_manager, admin_manager):
        self.bot = telebot.TeleBot(token)
        self.payments_token = payments_token
        self.db_manager = db_manager
        self.db_manager.execute_query("UPDATE users SET stage = 0")
        self.user_manager = user_manager
        self.admin_manager = admin_manager
        self.job_search = JobSearch(headers, db_manager, self.bot)
        self.users_vacancies = {}
        self.users_requests = {}
        self.setup_handlers()

    def run(self):
        self.bot.polling(none_stop=True, interval=0)

    def setup_handlers(self):
        self.bot.message_handler(commands=['start'])(self.start)
        self.bot.message_handler(commands=['pay1'])(self.pay1_command)
        self.bot.message_handler(commands=['pay2'])(self.pay2_command)
        self.bot.message_handler(commands=['pay3'])(self.pay3_command)
        self.bot.message_handler(content_types=['text'])(self.handle_text)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('delete_request_'))(self.delete_request)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('delete_new_unique_vacancy_'))(self.delete_new_unique_vacancy)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('approve_new_unique_vacancy_'))(self.approve_new_unique_vacancy)
        self.bot.callback_query_handler(func=lambda call: call.data.startswith('delete_unique_vacancy_'))(self.delete_unique_vacancy)
        self.bot.pre_checkout_query_handler(func=lambda query: True)(self.pre_checkout_query)
        self.bot.message_handler(content_types=['successful_payment'])(self.successful_payment)

    def show_main_menu(self, user_id):
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

        item1 = types.KeyboardButton("üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç")
        item2 = types.KeyboardButton("üìã –ú–æ—ó –∑–∞–ø–∏—Ç–∏")
        item3 = types.KeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ–∏ —Ç–∞ –û–ø–ª–∞—Ç–∞")
        item4 = types.KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç")
        item5 = types.KeyboardButton("üíº –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é")
        item6 = types.KeyboardButton("üìû –°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏")

        markup.add(item1, item2, item3, item4, item5, item6)

        self.bot.send_message(user_id, "–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", reply_markup=markup)

    def show_create_UV_required_fields_menu(self, user_id):
        mandatory_markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)

        item1 = telebot.types.KeyboardButton("–î–æ–¥–∞—Ç–∏ –Ω–∞–∑–≤—É –≤–∞–∫–∞–Ω—Å—ñ—ó")
        item2 = telebot.types.KeyboardButton("–î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
        item3 = telebot.types.KeyboardButton("–î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∑–≤'—è–∑–∫—É")
        item4 = telebot.types.KeyboardButton("‚¨ÖÔ∏è")
        item5 = telebot.types.KeyboardButton("‚û°Ô∏è")

        mandatory_markup.add(item1,item2, item3)
        mandatory_markup.add(item4, item5)

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        self.bot.send_message(user_id, "–û–±–µ—Ä—ñ—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è:", reply_markup=mandatory_markup)

    def show_create_UV_optional_fields_menu(self, user_id):
        mandatory_markup = telebot.types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True, one_time_keyboard=True)

        item1 = telebot.types.KeyboardButton("–î–æ–¥–∞—Ç–∏ –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó")
        item2 = telebot.types.KeyboardButton("–î–æ–¥–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é")
        item3 = telebot.types.KeyboardButton("–î–æ–¥–∞—Ç–∏ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó")
        item4 = telebot.types.KeyboardButton("–î–æ–¥–∞—Ç–∏ –∑–∞—Ä–æ–±—ñ—Ç–Ω—é –ø–ª–∞—Ç—É")
        item5 = telebot.types.KeyboardButton("–î–æ–¥–∞—Ç–∏ –º—ñ—Å—Ç–æ —Ä–æ–±–æ—Ç–∏")
        item6 = telebot.types.KeyboardButton("–î–æ–¥–∞—Ç–∏ –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏")
        item7 = telebot.types.KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥")
        item8 = telebot.types.KeyboardButton("‚úÖ–ì–æ—Ç–æ–≤–æ")

        mandatory_markup.add(item1, item2, item3, item4, item5, item6, item7, item8)

        self.bot.send_message(user_id, "–û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è:",  reply_markup=mandatory_markup)

    def generate_keyboard(self, options, button_size):
       keyboard_rows = []
       for i in range(0, len(options), button_size):
            keyboard_rows.append(options[i:i + button_size])
       markup = types.ReplyKeyboardMarkup(row_width=button_size, resize_keyboard=True)
       for row in keyboard_rows:
            markup.row(*[types.KeyboardButton(option) for option in row])

       return markup

    def start(self, message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        welcome_message = """
        üëã <b>–ü—Ä–∏–≤—ñ—Ç!</b> –í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç –∑ –ø–æ—à—É–∫—É —Ä–æ–±–æ—Ç–∏!

        –ù–∞—à –±–æ—Ç –Ω–∞–¥–∞—î –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å–∫—Ä–∞–ø—ñ–Ω–≥—É –≤–∞–∫–∞–Ω—Å—ñ–π –∑ —Å–∞–π—Ç—ñ–≤ <b>Work.ua</b>, <b>Robota.ua</b>, <b>Djinni.co</b>, <b>Dou.ua</b> —Ç–∞ <b>Jooble.ua</b>.
       
        üîπ <b>–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –∑–∞–ø–∏—Ç</b>: 1 –∑–∞–ø–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ. –î–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å <b>–¢–∞—Ä–∏—Ñ–∏ —Ç–∞ –æ–ø–ª–∞—Ç–∞</b>.

        üîπ <b>–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é</b>: –®–∞–Ω–æ–≤–Ω—ñ —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—É –≤–∞–∫–∞–Ω—Å—ñ—é, —è–∫–∞ –±—É–¥–µ –≤–∏–¥—ñ–ª—è—Ç–∏—Å—è —Å–µ—Ä–µ–¥ —ñ–Ω—à–∏—Ö. –î–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é</b>.

        üîπ <b>–ú–æ—ó –∑–∞–ø–∏—Ç–∏</b>: –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ —ñ –∫–µ—Ä—É–π—Ç–µ —Å–≤–æ—ó–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ <b>–ú–æ—ó –∑–∞–ø–∏—Ç–∏</b>.

        –ù–∞—à —Å–µ—Ä–≤—ñ—Å –æ–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω, —Ç–æ–º—É –≤–∏ –∑–∞–≤–∂–¥–∏ –±–∞—á–∏—Ç–µ –Ω–∞–π—Å–≤—ñ–∂—ñ—à—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó.

        –ë–∞–∂–∞—î–º–æ —É—Å–ø—ñ—Ö—É —É –ø–æ—à—É–∫—É —Ä–æ–±–æ—Ç–∏!ü•∞
        """

        self.bot.send_message(message.from_user.id, welcome_message, reply_markup=markup, parse_mode="HTML")
        self.show_main_menu(message.from_user.id)
        self.user_manager.set_stage(message.from_user.id, STAGE.START.value)


    def show_create_request_menu(self, user_id):
        self.bot.send_message(user_id, "–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ—à—É–∫—É:", reply_markup=self.generate_keyboard(["üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "üèô –ú—ñ—Å—Ç–æ", "üíº –ü–æ–∑–∏—Ü—ñ—è", "‚è≥ –î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏", "üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞", "üîç –ü–æ—á–∞—Ç–∏ –ø–æ—à—É–∫!"], 2))

    def pre_checkout_query(self, pre_checkout_query):
        try:
           self.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        except Exception as e:
            print(f"Error handling pre_checkout_query: {e}")

    def successful_payment(self, message):
        payment_info = message.successful_payment
        payment_details = (f"Chat id: {message.chat.id}\n"
                           f"Currency: {payment_info.currency}\n"
                           f"Total amount: {payment_info.total_amount / 100:.2f} {payment_info.currency}\n"
                           f"Invoice payload: {payment_info.invoice_payload}")
        print("SUCCESSFUL PAYMENT:", payment_details)
        self.bot.send_message(message.chat.id, f"–ü–ª–∞—Ç—ñ–∂ –Ω–∞ —Å—É–º—É {payment_info.total_amount / 100:.2f} {payment_info.currency} –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ.")

        if payment_info.invoice_payload == "üî¥ –ï–∫–æ–Ω–æ–º":
            self.pay1_payment_end(message.chat.id)
        elif payment_info.invoice_payload == "üü† –°—Ç–∞–Ω–¥–∞—Ä—Ç":
            self.pay2_payment_end(message.chat.id)
        elif payment_info.invoice_payload == "üü¢ –ë—ñ–∑–Ω–µ—Å":
            self.pay3_payment_end(message.chat.id)

    def pay1_command(self, message):
        prices = [types.LabeledPrice(label="üî¥ –ï–∫–æ–Ω–æ–º", amount=4000)]
        self.bot.send_invoice(
            chat_id=message.chat.id,
            title="üî¥ –ï–∫–æ–Ω–æ–º",
            description="""–°—Ç–≤–æ—Ä—é–π—Ç–µ –¥–æ –¥–≤–æ—Ö(2) –ø–æ—à—É–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ –º—ñ—Å—è—Ü—å. \n–¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∞ —Ç—Ä–∏–≤–∞—î –ø—Ä–æ—Ç—è–≥–æ–º –æ–¥–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è. \n–û–ø–ª–∞—á—É—é—á–∏ –í–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ –£–º–æ–≤–∞–º–∏ –ö–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è.""",
            provider_token=self.payments_token,
            currency='UAH',
            photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg", # –§–æ—Ç–æ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏
            photo_width=416,
            photo_height=234,
            photo_size=416,
            is_flexible=False,
            prices=prices,
            max_tip_amount=20000,
            suggested_tip_amounts=[1000, 5000, 10000],
            start_parameter='time-machine-subs',
            invoice_payload='üî¥ –ï–∫–æ–Ω–æ–º'
        )

    def pay2_command(self, message):
        prices = [types.LabeledPrice(label="üü† –°—Ç–∞–Ω–¥–∞—Ä—Ç", amount=8000)]
        self.bot.send_invoice(
            chat_id=message.chat.id,
            title="üü† –°—Ç–∞–Ω–¥–∞—Ä—Ç",
            description="""–°—Ç–≤–æ—Ä—é–π—Ç–µ –¥–æ —á–æ—Ç–∏—Ä—å–æ—Ö(4) –ø–æ—à—É–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ –º—ñ—Å—è—Ü—å. \n–¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∞ —Ç—Ä–∏–≤–∞—î –ø—Ä–æ—Ç—è–≥–æ–º –æ–¥–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è. \n–û–ø–ª–∞—á—É—é—á–∏ –í–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ –£–º–æ–≤–∞–º–∏ –ö–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è.""",
            provider_token=self.payments_token,
            currency='UAH',
            photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg", # –§–æ—Ç–æ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏
            photo_width=416,
            photo_height=234,
            photo_size=416,
            is_flexible=False,
            prices=prices,
            max_tip_amount=20000,
            suggested_tip_amounts=[1000, 5000, 10000],
            start_parameter='time-machine-subs',
            invoice_payload='üü† –°—Ç–∞–Ω–¥–∞—Ä—Ç'
        )

    def pay3_command(self, message):
        prices = [types.LabeledPrice(label="üü¢ –ë—ñ–∑–Ω–µ—Å", amount=20000)]
        self.bot.send_invoice(
            chat_id=message.chat.id,
            title="üü¢ –ë—ñ–∑–Ω–µ—Å",
            description="""–°—Ç–≤–æ—Ä—é–π—Ç–µ –¥–æ –¥–µ—Å—è—Ç–∏(10) –ø–æ—à—É–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ –º—ñ—Å—è—Ü—å. \n–¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ —Ç–∞ —Ç—Ä–∏–≤–∞—î –ø—Ä–æ—Ç—è–≥–æ–º –æ–¥–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è. \n–û–ø–ª–∞—á—É—é—á–∏ –í–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ –£–º–æ–≤–∞–º–∏ –ö–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è.""",
            provider_token=self.payments_token,
            currency='UAH',
            photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg", # –§–æ—Ç–æ –º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏
            photo_width=416,
            photo_height=234,
            photo_size=416,
            is_flexible=False,
            prices=prices,
            max_tip_amount=20000,
            suggested_tip_amounts=[1000, 5000, 10000],
            start_parameter='time-machine-subs',
            invoice_payload='üü¢ –ë—ñ–∑–Ω–µ—Å'
        )

    def pay1_payment_end(self, chat_id):
        end_date_subscription = get_end_subscription_date()
        self.db_manager.execute_query("UPDATE users SET paid_subscription = 1, max_num_of_request = 2, end_date_subscription = %s WHERE chat_id = %s", (end_date_subscription, chat_id))
        self.bot.send_message(chat_id, "–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ï–∫–æ–Ω–æ–º.")

    def pay2_payment_end(self, chat_id):
        end_date_subscription = get_end_subscription_date()
        self.db_manager.execute_query("UPDATE users SET paid_subscription = 2, max_num_of_request = 4, end_date_subscription = %s WHERE chat_id = %s", (end_date_subscription, chat_id))
        self.bot.send_message(chat_id, "–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç.")

    def pay3_payment_end(self, chat_id):
        end_date_subscription = get_end_subscription_date()
        self.db_manager.execute_query("UPDATE users SET paid_subscription = 3, max_num_of_request = 10, end_date_subscription = %s WHERE chat_id = %s", (end_date_subscription, chat_id))
        self.bot.send_message(chat_id, "–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ë—ñ–∑–Ω–µ—Å.")

    def show_user_requests(self, chat_id):
        query = "SELECT * FROM requests WHERE chat_id = %s"
        params = (chat_id,)
        user_requests = self.db_manager.execute_query(query, params)

        if user_requests:
            for i, req in enumerate(user_requests, start=1):
                request_text = f"""
    <b>üîç –ù–æ–º–µ—Ä –∑–∞–ø–∏—Ç—É:</b> {i} \n
"""

                if req[2]:
                    request_text += f"<b>üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {req[2]}\n"
                if req[3]:
                    request_text += f"<b>üíº –ü–æ–∑–∏—Ü—ñ—è:</b> {req[3]}\n"
                if req[4]:
                    request_text += f"<b>üèô –ú—ñ—Å—Ç–æ:</b> {req[4]}\n"
                if req[5] != 0:
                    request_text += f"<b>üí∞ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∑–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞:</b> {req[5]}\n"
                if req[6] != -2:
                    if req[6] == -1:
                        request_text += "<b>üïí –î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏:</b> –°—Ç—É–¥–µ–Ω—Ç\n"
                    else:
                        request_text += f"<b>üïí –î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏:</b> {req[6]} —Ä–æ–∫—ñ–≤\n"

                # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è
                request_text += "\n<i>–Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–≤—ñ–π –∑–∞–ø–∏—Ç, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.</i>\n"

                # –°—Ç–≤–æ—Ä—é—î–º–æ InlineKeyboardButton –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É –∑ –∫–Ω–æ–ø–∫–æ—é "–í–∏–¥–∞–ª–∏—Ç–∏"
                button = types.InlineKeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_request_{req[0]}")
                markup = types.InlineKeyboardMarkup().add(button)
                self.bot.send_message(chat_id, request_text, reply_markup=markup, parse_mode="HTML")
        else:
             no_requests_text = """
                <b>–í–∏ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–∏–ª–∏ –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É.</b> \n \n–î–ª—è —Ç–æ–≥–æ, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç</b> –≤ –º–µ–Ω—é."""
             self.bot.send_message(chat_id, no_requests_text, parse_mode="HTML")

    def delete_request(self, call):
        request_id = int(call.data.split('_')[-1])
        self.db_manager.execute_query("UPDATE users SET num_of_used_request = num_of_used_request - 1 WHERE chat_id = %s", (call.from_user.id,))
        self.db_manager.execute_query("DELETE FROM requests WHERE request_id = %s", (request_id,))
        self.bot.answer_callback_query(call.id, "–ó–∞–ø–∏—Ç –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")
        self.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    def delete_unique_vacancy(self, call):
        unique_vacancy_id = int(call.data.split('_')[-1])
        delete_result = self.db_manager.execute_query("DELETE FROM unique_vacancies WHERE vacancy_id = %s", (unique_vacancy_id,))
        self.bot.answer_callback_query(call.id, "–í–∞–∫–∞–Ω—Å—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ.")
        self.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

    def send_new_vacancy_to_admin(self, chat_id):
        button_delete = types.InlineKeyboardButton(text="‚ùå", callback_data=f"delete_new_unique_vacancy_{chat_id}")
        button_approve = types.InlineKeyboardButton(text="‚úÖ", callback_data=f"approve_new_unique_vacancy_{chat_id}")
        markup = types.InlineKeyboardMarkup().add(button_delete, button_approve)
        self.bot.send_message(self.admin_manager.get_main_admin_id(), self.users_vacancies.get(chat_id), reply_markup=markup)

    def delete_new_unique_vacancy(self, call):
        chat_id = int(call.data.split('_')[-1])
        self.bot.send_message(chat_id, "–ù–∞ –∂–∞–ª—å, –≤–∞—à–∞ –≤–∞–∫–∞–Ω—Å—ñ—è:\n\n" + str(self.users_vacancies.get(chat_id)) + "\n–ù–µ –ø—Ä–æ–π—à–ª–∞ –º–æ–¥–µ—Ä—É–≤–∞–Ω–Ω—è")
        del self.users_vacancies[chat_id]
        self.bot.edit_message_reply_markup(chat_id=self.admin_manager.get_main_admin_id(), message_id=call.message.message_id, reply_markup=None)
        self.bot.send_message(self.admin_manager.get_main_admin_id(), "–í–∞–∫–∞–Ω—Å—ñ—é –≤–∏–¥–∞–ª–µ–Ω–æ.")

    def approve_new_unique_vacancy(self, call):
        chat_id = int(call.data.split('_')[-1])
        result = self.users_vacancies.get(chat_id).add_unique_vacancy_to_db(self.db_manager)
        self.bot.send_message(chat_id, "–í—ñ—Ç–∞—î–º–æ, –≤–∞—à–∞ –≤–∞–∫–∞–Ω—Å—ñ—è –ø—Ä–æ–π—à–ª–∞ –º–æ–¥–µ—Ä—É–≤–∞–Ω–Ω—è —ñ –≤–∂–µ –¥–æ–¥–∞–Ω–∞ –¥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π!\n –í–∞–∫–∞–Ω—Å—ñ—è –º–∞—î —Ç–∞–∫–∏–π –≤–∏–≥–ª—è–¥")
        if result:
            button = types.InlineKeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_unique_vacancy_{result}")
            markup = types.InlineKeyboardMarkup().add(button)
            self.bot.send_photo(chat_id, "https://i.ibb.co/ZW5P5PB/hot-vacancy.jpg", reply_markup=markup, caption=format_unique_vacancy(self.users_vacancies.get(chat_id).to_dict()), parse_mode='HTML')
        self.bot.edit_message_reply_markup(chat_id=self.admin_manager.get_main_admin_id(), message_id=call.message.message_id, reply_markup=None)
        self.bot.send_message(self.admin_manager.get_main_admin_id(), "–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤–∞–∫–∞–Ω—Å—ñ—é, –≤–æ–Ω–∞ –¥–æ–¥–∞–Ω–∞ –¥–æ DB.")
        del self.users_vacancies[chat_id]


    def handle_text(self, message):
        self.user_manager.check_and_new_add_user_to_db(message.from_user.id) #threading.Thread(target=check_and_new_add_user_to_db, args=(message.from_user.id, )).start()
        stage = STAGE(self.user_manager.get_stage(message.from_user.id))

        if message.text == "üîç –ü–æ—á–∞—Ç–∏ –ø–æ—à—É–∫!" and stage==STAGE.CREATE_REQUEST:
            if self.users_requests.get(message.from_user.id).language == "":
              self.bot.send_message(message.from_user.id, "–î–ª—è —Ç–æ–≥–æ, —â–æ–± –ø–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ –≤–∞–∫–∞–Ω—Å—ñ–π, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –æ–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–æ—à—É–∫—É. –¶–µ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è'")
              self.bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=self.generate_keyboard(categories, 3))
              self.user_manager.set_stage(message.from_user.id, STAGE.NEXT_PARAM_CATEGORY.value)
            else:
              self.user_manager.set_stage(message.from_user.id, STAGE.START_SEARCH.value)

        if message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" or message.text == "‚¨ÖÔ∏è":
            self.user_manager.set_stage(message.from_user.id, STAGE.START.value)
            self.show_main_menu(message.from_user.id)
        else:
            stage = STAGE(self.user_manager.get_stage(message.from_user.id))
            print("stage = ", stage)
            handlers = {
                STAGE.START: self.handle_start,
                STAGE.CREATE_REQUEST: self.handle_create_request,
                STAGE.NEXT_PARAM_CATEGORY: self.handle_next_param_category,
                STAGE.NEXT_PARAM_LANGUAGE: self.handle_next_param_language,
                STAGE.NEXT_PARAM_CITY: self.handle_next_param_city,
                STAGE.NEXT_PARAM_POSITION: self.handle_next_param_position,
                STAGE.NEXT_PARAM_EXPERIENCE: self.handle_next_param_experience,
                STAGE.NEXT_PARAM_MIN_SALARY: self.handle_next_param_min_salary,
                STAGE.CREATE_UNIQUE_VACANCY: self.handle_create_unique_vacancy,
                STAGE.CREATE_UV_NEXT_PARAM_CATEGORY: self.handle_create_uv_next_param_category,
                STAGE.CREATE_UV_ADD_JOB_TITLE: self.handle_create_uv_add_job_title,
                STAGE.CREATE_UV_ADD_CATEGORY: self.handle_create_uv_add_category,
                STAGE.CREATE_UV_ADD_COMPANY_NAME: self.handle_create_uv_add_company_name,
                STAGE.CREATE_UV_ADD_DESCRIPTION: self.handle_create_uv_add_description,
                STAGE.CREATE_UV_ADD_SALARY: self.handle_create_uv_add_salary,
                STAGE.CREATE_UV_ADD_EXPERIENCE: self.handle_create_uv_add_experience,
                STAGE.CREATE_UV_ADD_CITY: self.handle_create_uv_add_city,
                STAGE.CREATE_UV_ADD_CONTACT: self.handle_create_uv_add_contact,
                STAGE.CREATE_UV_ADD_POSITION: self.handle_create_uv_add_position,
                STAGE.START_SEARCH: self.start_search,
            }
            handler = handlers.get(stage, self.handle_default)
            handler(message)

    def handle_default(self, message):
        self.bot.send_message(message.from_user.id, "–°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à—É –∫–æ–º–∞–Ω–¥—É. –í–≤–µ–¥—ñ—Ç—å /start.")

    def handle_start(self, message):
        if message.text == "üìã –ú–æ—ó –∑–∞–ø–∏—Ç–∏":
            self.user_manager.set_stage(message.from_user.id, STAGE.MY_REQUESTS.value)
            self.show_user_requests(message.from_user.id)
            self.user_manager.set_stage(message.from_user.id, STAGE.START.value)
        elif message.text == "üìù –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç":
            if self.user_manager.user_can_create_request(message.from_user.id):
              self.show_create_request_menu(message.from_user.id)
              self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_REQUEST.value)
            else:
              self.bot.send_message(message.from_user.id, "–í–∏ –≤–∏—á–µ—Ä–ø–∞–ª–∏ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –∑–∞ –ø–µ—Ä–µ–¥–ø–ª–∞—Ç–æ—é.")
        elif message.text == "üí≥ –¢–∞—Ä–∏—Ñ–∏ —Ç–∞ –û–ø–ª–∞—Ç–∞":
           subscription_info = self.user_manager.get_subscription_info(message.from_user.id)
           self.bot.send_message(message.from_user.id, f"""
                        –í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞—Ä–∏—Ñ: {subscription_info}

                        –•–æ—á–µ—Ç–µ –º–∞—Ç–∏ –±—ñ–ª—å—à–µ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π —É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞? –û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∞—Ä–∏—Ñ—ñ–≤:

                        üî¥ –ï–∫–æ–Ω–æ–º
                        - –î–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –¥–æ –¥–≤–æ—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ –º—ñ—Å—è—Ü—å
                        - –¶—ñ–Ω–∞: $1 –Ω–∞ –º—ñ—Å—è—Ü—å
                        - –î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay1

                        üü† –°—Ç–∞–Ω–¥–∞—Ä—Ç
                        - –î–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –¥–æ —á–æ—Ç–∏—Ä—å–æ—Ö –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ –º—ñ—Å—è—Ü—å
                        - –¶—ñ–Ω–∞: $2 –Ω–∞ –º—ñ—Å—è—Ü—å
                        - –î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay2

                        üü¢ –ë—ñ–∑–Ω–µ—Å
                        - –î–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –¥–æ –¥–µ—Å—è—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É –≤–∞–∫–∞–Ω—Å—ñ–π –Ω–∞ –º—ñ—Å—è—Ü—å
                        - –¶—ñ–Ω–∞: $5 –Ω–∞ –º—ñ—Å—è—Ü—å
                        - –î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pay3

                        –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –±—ñ–ª—å—à–æ–≥–æ –æ–±—Å—è–≥—É –≤–∞–∫–∞–Ω—Å—ñ–π —Ç–∞ —ñ–Ω—à–∏—Ö –∫–æ—Ä–∏—Å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.
                        """)
        elif message.text == "‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç":
            about_bot_message = """
            <b>–ü—Ä–æ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞ –∑ –ø–æ—à—É–∫—É —Ä–æ–±–æ—Ç–∏:</b>

            –ù–∞—à –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –ø–æ–ª–µ–≥—à–∏—Ç–∏ –ø–æ—à—É–∫ —Ä–æ–±–æ—Ç–∏ –¥–ª—è –≤–∞—Å. –í—ñ–Ω –¥–æ–ø–æ–º–∞–≥–∞—î —à–≤–∏–¥–∫–æ –∑–Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –∑ —Ä—ñ–∑–Ω–∏—Ö —Å–∞–π—Ç—ñ–≤, –∑–∞–æ—â–∞–¥–∂—É—é—á–∏ –≤–∞—à —á–∞—Å —Ç–∞ –∑—É—Å–∏–ª–ª—è.

            <b>–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞:</b>

            üîπ <b>–°–∫—Ä–∞–ø—ñ–Ω–≥ –¥–∞–Ω–∏—Ö:</b>
            –ù–∞—à –±–æ—Ç –∑–±–∏—Ä–∞—î –≤–∞–∫–∞–Ω—Å—ñ—ó –∑ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö —Å–∞–π—Ç—ñ–≤, —Ç–∞–∫–∏—Ö —è–∫ Work.ua, Robota.ua, Djinni.co, Dou.ua, Jooble.ua. –ó–∞–≤–¥—è–∫–∏ —Ü—å–æ–º—É –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –Ω–∞–π—Å–≤—ñ–∂—ñ—à—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó, —è–∫—ñ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω.

            üîπ <b>–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –∑–∞–ø–∏—Ç:</b>
            –ü—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –æ–¥–∏–Ω –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –∑–∞–ø–∏—Ç. –¶–µ –¥–æ–∑–≤–æ–ª—è—î –≤–∞–º —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –≤—Å—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞ –±–µ–∑ –∂–æ–¥–Ω–∏—Ö –∑–æ–±–æ–≤'—è–∑–∞–Ω—å.

            üîπ <b>–¢–∞—Ä–∏—Ñ–∏ —Ç–∞ –æ–ø–ª–∞—Ç–∞:</b>
            –Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–±—ñ–ª—å—à–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>–¢–∞—Ä–∏—Ñ–∏ —Ç–∞ –æ–ø–ª–∞—Ç–∞</b>. –í–∏ –∑–º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω–∏–π –ø–ª–∞–Ω —Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–∏ –π–æ–≥–æ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤.

            üîπ <b>–£–Ω—ñ–∫–∞–ª—å–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ–≤:</b>
            –†–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ –º–æ–∂—É—Ç—å –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Å–≤–æ—ó —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó, —è–∫—ñ –º–∞—Ç–∏–º—É—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –¥–∏–∑–∞–π–Ω —Ç–∞ –±—É–¥—É—Ç—å –≤–∏–¥—ñ–ª—è—Ç–∏—Å—è —Å–µ—Ä–µ–¥ —ñ–Ω—à–∏—Ö. –î–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>–ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é</b>. –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å—ñ—è –±—É–¥–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏—Å—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –ø—Ä–æ—Ç—è–≥–æ–º 14 –¥–Ω—ñ–≤ –∑ –º–æ–º–µ–Ω—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.

            üîπ <b>–ú–æ—ó –∑–∞–ø–∏—Ç–∏:</b>
            –í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–Ω–æ–ø–∫—É <b>–ú–æ—ó –∑–∞–ø–∏—Ç–∏</b>. –¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–∞–ø–∏—Ç–∏.

            üîπ <b>–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b>
            –ù–∞—à –±–æ—Ç –æ–Ω–æ–≤–ª—é—î –≤–∞–∫–∞–Ω—Å—ñ—ó –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω, —â–æ –¥–æ–∑–≤–æ–ª—è—î –≤–∞–º –±–∞—á–∏—Ç–∏ –Ω–∞–π–Ω–æ–≤—ñ—à—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ —Ç–∞ —Ä–µ–∞–≥—É–≤–∞—Ç–∏ –Ω–∞ –Ω–∏—Ö –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —à–≤–∏–¥–∫–æ.

            üîπ <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:</b>
            1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.
            2. –í–≤–µ–¥—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—É.
            3. –û—Ç—Ä–∏–º—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞ —Ä–µ–∞–≥—É–π—Ç–µ –Ω–∞ –Ω–∏—Ö.

            üîπ <b>–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:</b>
            –Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É <b>–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏</b> –¥–ª—è –∑–≤'—è–∑–∫—É –∑ –Ω–∞—à–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.

            –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞! –ë–∞–∂–∞—î–º–æ —É—Å–ø—ñ—Ö—É —É –ø–æ—à—É–∫—É —Ä–æ–±–æ—Ç–∏!
            """

            self.bot.send_message(message.from_user.id, about_bot_message, parse_mode="HTML")
        elif message.text == "üíº –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é":
            send_job_offer_instructions(self, message.from_user.id)
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UNIQUE_VACANCY.value)
            self.show_create_UV_required_fields_menu(message.from_user.id)
            self.users_vacancies[message.from_user.id] = UniqueVacancy()
        elif message.text == "üìû –°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏":
          contact_info = f"""
<b>–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:</b>
    –ü–Ω-–ü—Ç: <b>–∑ 10:00 –¥–æ 20:00</b>
    –°–±-–ù–¥: <b>–∑ 11:00 –¥–æ 16:00</b>

<b>–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏:</b>
  üìû <a href="tel:+380999999999">+380 (99) 999 99 99</a>
  üìß <a href="mailto:jobhunthelpersupport@gmail.com">jobhunthelpersupport@gmail.com</a>

<i>–©–æ–± –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:</i>
  """
                # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
          button =  types.InlineKeyboardButton(text="üì± –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url="https://t.me/anneti_net")
          # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ —Ü—ñ—î—é –∫–Ω–æ–ø–∫–æ—é
          markup =  types.InlineKeyboardMarkup().add(button)
          self.bot.send_message(message.from_user.id, contact_info, reply_markup=markup, parse_mode="HTML")
          # # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä–∞–∑–æ–º –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
          # self.bot.send_message(chat_id, "–©–æ–± –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=markup)
        else:
          self.show_main_menu(message.from_user.id)

    def handle_create_request(self, message):
        if message.from_user.id not in self.users_requests:
          self.users_requests[message.from_user.id] = Request()
        print(self.users_requests.get(message.from_user.id))
        if message.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è":
            self.bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=self.generate_keyboard(categories, 3))
            self.user_manager.set_stage(message.from_user.id, STAGE.NEXT_PARAM_CATEGORY.value)
        elif message.text == "üèô –ú—ñ—Å—Ç–æ":
            self.bot.send_message(message.from_user.id, "–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –ø–æ—à—É–∫—É:", reply_markup=self.generate_keyboard(cities, 3))
            self.user_manager.set_stage(message.from_user.id, STAGE.NEXT_PARAM_CITY.value)
        elif message.text == "üíº –ü–æ–∑–∏—Ü—ñ—è":
            self.bot.send_message(message.from_user.id, "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –ø–æ–∑–∏—Ü—ñ—é:", reply_markup=self.generate_keyboard(positions, 2))
            self.user_manager.set_stage(message.from_user.id, STAGE.NEXT_PARAM_POSITION.value)
        elif message.text == "‚è≥ –î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏":
            self.bot.send_message(message.from_user.id, "–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É:")
            self.user_manager.set_stage(message.from_user.id, STAGE.NEXT_PARAM_EXPERIENCE.value)
        elif message.text == "üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞":
            self.bot.send_message(message.from_user.id, "–í–∫–∞–∂—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∑–∞—Ä–ø–ª–∞—Ç—É (–≥—Ä–Ω):")
            self.user_manager.set_stage(message.from_user.id, STAGE.NEXT_PARAM_MIN_SALARY.value)

    def handle_next_param_category(self, message):
        if message.text == "–†–æ–∑—Ä–æ–±–∫–∞":
            self.bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É:", reply_markup=self.generate_keyboard(programming_languages, 3))
            self.user_manager.set_stage(message.from_user.id, STAGE.NEXT_PARAM_LANGUAGE.value)
        elif message.text == "–¢–µ—Ö–Ω—ñ—á–Ω—ñ":
            self.bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ö–Ω—ñ—á–Ω—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –¥–ª—è –ø–æ—à—É–∫—É:", reply_markup=self.generate_keyboard(technical_specialties, 3))
            self.user_manager.set_stage(message.from_user.id, STAGE.NEXT_PARAM_LANGUAGE.value)
        elif message.text == "–ù–µ—Ç–µ—Ö–Ω—ñ—á–Ω—ñ":
            self.bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –Ω–µ—Ç–µ—Ö–Ω—ñ—á–Ω—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –¥–ª—è –ø–æ—à—É–∫—É:", reply_markup=self.generate_keyboard(nontechnical_specialties, 3))
            self.user_manager.set_stage(message.from_user.id, STAGE.NEXT_PARAM_LANGUAGE.value)

    def set_stage_create_request_and_show_menu(self, chat_id):
        self.user_manager.set_stage(chat_id, STAGE.CREATE_REQUEST.value)
        self.show_create_request_menu(chat_id)

    def handle_next_param_language(self, message):
        self.users_requests.get(message.from_user.id).set_language(message.text)
        self.set_stage_create_request_and_show_menu(message.from_user.id)

    def handle_next_param_city(self, message):
        self.users_requests.get(message.from_user.id).set_city(message.text)
        self.set_stage_create_request_and_show_menu(message.from_user.id)

    def handle_next_param_position(self, message):
        self.users_requests.get(message.from_user.id).set_position(message.text)
        self.set_stage_create_request_and_show_menu(message.from_user.id)

    def handle_next_param_experience(self, message):
        self.users_requests.get(message.from_user.id).set_experience(message.text)
        self.set_stage_create_request_and_show_menu(message.from_user.id)

    def handle_next_param_min_salary(self, message):
        self.users_requests.get(message.from_user.id).set_min_salary(message.text)
        self.set_stage_create_request_and_show_menu(message.from_user.id)

    def handle_create_unique_vacancy(self, message):
        if message.text == "‚¨ÖÔ∏è":
            self.user_manager.set_stage(message.from_user.id, STAGE.START.value)
            self.show_main_menu(message.from_user.id)
        elif message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥":
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UNIQUE_VACANCY.value)
            self.show_create_UV_required_fields_menu(message.from_user.id)
        elif message.text == "–î–æ–¥–∞—Ç–∏ –Ω–∞–∑–≤—É –≤–∞–∫–∞–Ω—Å—ñ—ó":
            instructions = """
    üìù <b>–Ø–∫ –Ω–∞–∑–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ?</b>

    - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑—Ä–æ–∑—É–º—ñ–ª—ñ —Ç–µ—Ä–º—ñ–Ω–∏ —Ç–∞ —É–Ω–∏–∫–∞–π—Ç–µ –∞–±—Ä–µ–≤—ñ–∞—Ç—É—Ä, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª—ñ.
    - –í–∫–∞–∂—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å –ø–æ–∑–∏—Ü—ñ—ó, —è–∫—â–æ —Ü–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Junior, Middle, Senior).

    <b>–ü—Ä–∏–∫–ª–∞–¥:</b>
    - Junior Python Developer
    - Senior Project Manager
    - Marketing Specialist

    <i>–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞–∫–∞–Ω—Å—ñ—ó:</i>
    """
            self.bot.send_message(message.from_user.id, instructions, parse_mode="HTML")
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UV_ADD_JOB_TITLE.value)
        elif message.text == "–î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é":
            self.bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É", reply_markup=self.generate_keyboard(categories, 3))
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UV_NEXT_PARAM_CATEGORY.value)
        elif message.text == "–î–æ–¥–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é":
            self.bot.send_message(message.from_user.id, "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–∑–∏—Ü—ñ—é —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É:", reply_markup=self.generate_keyboard(positions, 2))
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UV_ADD_POSITION.value)
        elif message.text == "–î–æ–¥–∞—Ç–∏ –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó":
            self.bot.send_message(message.from_user.id, "üè¢ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞—à–æ—ó –∫–æ–º–ø–∞–Ω—ñ—ó –∞–±–æ –ü–Ü–ë —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—è")
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UV_ADD_COMPANY_NAME.value)
        elif message.text == "–î–æ–¥–∞—Ç–∏ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó":
            instructions = """
    üìÑ <b>–Ø–∫ –Ω–∞–ø–∏—Å–∞—Ç–∏ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –ø—Ä–∞–≤–∏–ª—å–Ω–æ?</b>

    –û–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –¥–æ–ø–æ–º–∞–≥–∞—î –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —â–æ —Å–∞–º–µ –æ—á—ñ–∫—É—î—Ç—å—Å—è –≤—ñ–¥ –Ω–∏—Ö –Ω–∞ —Ü—ñ–π –ø–æ—Å–∞–¥—ñ, –∞ —Ç–∞–∫–æ–∂ —è–∫—ñ –Ω–∞–≤–∏—á–∫–∏ —Ç–∞ –¥–æ—Å–≤—ñ–¥ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–ª—è —É—Å–ø—ñ—à–Ω–æ—ó —Ä–æ–±–æ—Ç–∏.

    <b>–û—Å–Ω–æ–≤–Ω—ñ –ø–æ—Ä–∞–¥–∏:</b>
    - –í–∫–∞–∂—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ –æ–±–æ–≤'—è–∑–∫–∏ —Ç–∞ –∑–∞–¥–∞—á—ñ, —è–∫—ñ –±—É–¥–µ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫.
    - –û–ø–∏—Å—É–π—Ç–µ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ —Ç–∞ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—é.
    - –ó–∞–∑–Ω–∞—á—Ç–µ —É–º–æ–≤–∏ –ø—Ä–∞—Ü—ñ, –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É —Ç–∞ –∫–∞—Ä'—î—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç—É.
    - –£–Ω–∏–∫–∞–π—Ç–µ –∑–∞–≥–∞–ª—å–Ω–∏—Ö —Ñ—Ä–∞–∑, –Ω–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥–µ—Ç–∞–ª—ñ.

    <b>–ü—Ä–∏–∫–ª–∞–¥:</b>
    <i>
    –û–±–æ–≤'—è–∑–∫–∏:
    - –†–æ–∑—Ä–æ–±–∫–∞ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—ñ–≤ –Ω–∞ Python.
    - –°–ø—ñ–≤–ø—Ä–∞—Ü—è –∑ –∫–æ–º–∞–Ω–¥–æ—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.
    - –ù–∞–ø–∏—Å–∞–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó.

    –í–∏–º–æ–≥–∏:
    - –î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –∑ Python –≤—ñ–¥ 2 —Ä–æ–∫—ñ–≤.
    - –ó–Ω–∞–Ω–Ω—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫—ñ–≤ Django –∞–±–æ Flask.
    - –í–º—ñ–Ω–Ω—è –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é –≤–µ—Ä—Å—ñ–π (Git).

    –ú–∏ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ:
    - –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É –∑–∞—Ä–æ–±—ñ—Ç–Ω—É –ø–ª–∞—Ç—É.
    - –ì–Ω—É—á–∫–∏–π –≥—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Ç–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤—ñ–¥–¥–∞–ª–µ–Ω–æ.
    - –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É —Ç–∞ –∫–∞—Ä'—î—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç—É.
    </i>

    ‚úèÔ∏è <i>–ù–∞–ø–∏—à—ñ—Ç—å –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó:</i>
    """
            self.bot.send_message(message.from_user.id, instructions, parse_mode="HTML")
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UV_ADD_DESCRIPTION.value)
        elif message.text == "–î–æ–¥–∞—Ç–∏ –∑–∞—Ä–æ–±—ñ—Ç–Ω—é –ø–ª–∞—Ç—É":
            instructions = """
    üíµ <b>–Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∑–∞—Ä–æ–±—ñ—Ç–Ω—É –ø–ª–∞—Ç—É?</b>

    –í–∫–∞–∑—É–≤–∞–Ω–Ω—è –∑–∞—Ä–æ–±—ñ—Ç–Ω–æ—ó –ø–ª–∞—Ç–∏ —î –≤–∞–∂–ª–∏–≤–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º –≤–∞–∫–∞–Ω—Å—ñ—ó, –æ—Å–∫—ñ–ª—å–∫–∏ —Ü–µ –º–æ–∂–µ –∑–Ω–∞—á–Ω–æ –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ —è–∫—ñ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤, —è–∫—ñ –≤—ñ–¥–≥—É–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞—à—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é.

    <b>–û—Å–Ω–æ–≤–Ω—ñ –ø–æ—Ä–∞–¥–∏:</b>
    - –í–∫–∞–∑—É–π—Ç–µ –∑–∞—Ä–æ–±—ñ—Ç–Ω—É –ø–ª–∞—Ç—É –≤ –º—ñ—Å—è—á–Ω–æ–º—É –∞–±–æ —Ä—ñ—á–Ω–æ–º—É –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç—ñ.
    - –ó–∞–∑–Ω–∞—á–∞–π—Ç–µ –≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, UAH, USD, EUR).
    - –ú–æ–∂–Ω–∞ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω, —è–∫—â–æ —Ç–æ—á–Ω–∞ —Å—É–º–∞ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.

    <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>
    - 20,000 - 30,000 UAH
    - –í—ñ–¥ 50,000 USD –Ω–∞ —Ä—ñ–∫
    - 25,000 UAH

    üìù <i>–ù–∞–ø–∏—à—ñ—Ç—å –∑–∞—Ä–æ–±—ñ—Ç–Ω—É –ø–ª–∞—Ç—É, —è–∫—É –≤–∏ –ø—Ä–æ–ø–æ–Ω—É—î—Ç–µ:</i>
    """
            self.bot.send_message(message.from_user.id, instructions, parse_mode="HTML")
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UV_ADD_SALARY.value)
        elif message.text == "–î–æ–¥–∞—Ç–∏ –º—ñ—Å—Ç–æ —Ä–æ–±–æ—Ç–∏":
            self.bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ:", reply_markup=self.generate_keyboard(cities, 3))
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UV_ADD_CITY.value)
        elif message.text == "–î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∑–≤'—è–∑–∫—É":
            self.bot.send_message(message.from_user.id, " –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –∑–≤'—è–∑–∫—É, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –≤–∞–º–∏ —â–æ–¥–æ –≤–∞–∫–∞–Ω—Å—ñ—ó. –í–∏ –º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ –±—É–¥—å-—è–∫–∏–π –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É, —Ç–∞–∫–∏–π —è–∫ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ª–æ–≥—ñ–Ω –≤ Telegram.")
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UV_ADD_CONTACT.value)
        elif message.text == "–î–æ–¥–∞—Ç–∏ –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏":
            self.bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à—ñ—Ç—å –Ω–µ–æ–±—ñ—Ö–¥–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É —Ä–æ–±–æ—Ç–∏")
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UV_ADD_EXPERIENCE.value)
        elif message.text == "–û–±–µ—Ä—ñ—Ç—å –ø–æ–∑–∏—Ü—ñ—é —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É":
            self.bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –ø–æ–∑–∏—Ü—ñ—é:", reply_markup=self.generate_keyboard(positions, 2))
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UV_ADD_POSITION.value)
        elif message.text == "‚û°Ô∏è":
            if self.check_all_required_fields_filled(message.from_user.id):
                self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UNIQUE_VACANCY.value)
                self.show_create_UV_optional_fields_menu(message.from_user.id)
        elif message.text == "‚úÖ–ì–æ—Ç–æ–≤–æ":
            print(self.users_vacancies.get(message.from_user.id))
            self.send_new_vacancy_to_admin(message.from_user.id)
            confirmation_message = """
–î—è–∫—É—î–º–æ, –≤–∞—à–∞ –≤–∞–∫–∞–Ω—Å—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n
üïí –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥–º–æ–≤–∞ –Ω–∞–¥—ñ–π–¥—É—Ç—å –ø—Ä–æ—Ç—è–≥–æ–º –æ–¥–Ω–æ–≥–æ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è.\n
–Ø–∫—â–æ –≤–∞—à–∞ –≤–∞–∫–∞–Ω—Å—ñ—è –±—É–¥–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞, –º–∏ –Ω–∞–¥–∞–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –ø–æ—è—Å–Ω–µ–Ω–Ω—è —â–æ–¥–æ –ø—Ä–∏—á–∏–Ω —Ü—å–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è.\n
"""
            self.bot.send_message(message.from_user.id, confirmation_message, parse_mode="HTML")
            self.user_manager.set_stage(message.from_user.id, STAGE.START.value)
            self.show_main_menu(message.from_user.id)

    def check_all_required_fields_filled(self, chat_id):
        is_all_required_fields_filled = True
        str_to_user = "–ú–∏ –Ω–µ –º–æ–∂–µ–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∞—à—É –≤–∞–∫–∞–Ω—Å—ñ—é –Ω–∞ –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä—É, –∞–¥–∂–µ –≤–∏ –Ω–µ –∑–∞–ø–æ–≤–Ω–∏–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: \n"
        if self.users_vacancies.get(chat_id).title == "":
          is_all_required_fields_filled = False
          str_to_user += "- –ù–∞–∑–≤–∞\n"
        if self.users_vacancies.get(chat_id).category == "":
          is_all_required_fields_filled = False
          str_to_user += "- –ö–∞—Ç–µ–≥–æ—Ä—ñ—è\n"
        if self.users_vacancies.get(chat_id).contact == "":
          str_to_user += "- –ö–æ–Ω—Ç–∞–∫—Ç\n"
          is_all_required_fields_filled = False
        if not is_all_required_fields_filled:
          self.bot.send_message(chat_id, str_to_user)
        return is_all_required_fields_filled

    def handle_create_uv_next_param_category(self, message):
        if message.text == "–†–æ–∑—Ä–æ–±–∫–∞":
            self.bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è:", reply_markup=self.generate_keyboard(programming_languages, 3))
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UV_ADD_CATEGORY.value)
        elif message.text == "–¢–µ—Ö–Ω—ñ—á–Ω—ñ":
            self.bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ö–Ω—ñ—á–Ω—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:", reply_markup=self.generate_keyboard(technical_specialties, 3))
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UV_ADD_CATEGORY.value)
        elif message.text == "–ù–µ—Ç–µ—Ö–Ω—ñ—á–Ω—ñ":
            self.bot.send_message(message.from_user.id, "–û–±–µ—Ä—ñ—Ç—å –Ω–µ—Ç–µ—Ö–Ω—ñ—á–Ω—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å:", reply_markup=self.generate_keyboard(nontechnical_specialties, 3))
            self.user_manager.set_stage(message.from_user.id, STAGE.CREATE_UV_ADD_CATEGORY.value)

    def set_stage_create_unique_vacancy_and_show_menu(self, chat_id, is_optional):
        self.user_manager.set_stage(chat_id, STAGE.CREATE_UNIQUE_VACANCY.value)
        if not is_optional:
            self.show_create_UV_required_fields_menu(chat_id)
        else:
            self.show_create_UV_optional_fields_menu(chat_id)

    def handle_create_uv_add_job_title(self, message):
        self.users_vacancies.get(message.from_user.id).set_title(message.text)
        self.set_stage_create_unique_vacancy_and_show_menu(message.from_user.id, is_optional = False)

    def handle_create_uv_add_category(self, message):
        self.users_vacancies.get(message.from_user.id).set_category(message.text)
        self.set_stage_create_unique_vacancy_and_show_menu(message.from_user.id, is_optional = False)

    def handle_create_uv_add_company_name(self, message):
        self.users_vacancies.get(message.from_user.id).set_company(message.text)
        self.set_stage_create_unique_vacancy_and_show_menu(message.from_user.id, is_optional = True)

    def handle_create_uv_add_description(self, message):
        self.users_vacancies.get(message.from_user.id).set_description(message.text)
        self.set_stage_create_unique_vacancy_and_show_menu(message.from_user.id, is_optional = True)

    def handle_create_uv_add_salary(self, message):
        self.users_vacancies.get(message.from_user.id).set_salary(message.text)
        self.set_stage_create_unique_vacancy_and_show_menu(message.from_user.id, is_optional = True)

    def handle_create_uv_add_experience(self, message):
        self.users_vacancies.get(message.from_user.id).set_experience(message.text)
        self.set_stage_create_unique_vacancy_and_show_menu(message.from_user.id, is_optional = True)

    def handle_create_uv_add_city(self, message):
        self.users_vacancies.get(message.from_user.id).set_city(message.text)
        self.set_stage_create_unique_vacancy_and_show_menu(message.from_user.id, is_optional = True)

    def handle_create_uv_add_contact(self, message):
        self.users_vacancies.get(message.from_user.id).set_contact(message.text)
        self.set_stage_create_unique_vacancy_and_show_menu(message.from_user.id, is_optional = False)

    def handle_create_uv_add_position(self, message):
        self.users_vacancies.get(message.from_user.id).set_position(message.text)
        self.set_stage_create_unique_vacancy_and_show_menu(message.from_user.id, is_optional = True)

    def start_search(self, message):
        self.show_main_menu(message.from_user.id)
        print("start_search_and_send_unique_vacancy")
        if self.users_requests.get(message.from_user.id).add_request_to_db(message.from_user.id, self.db_manager):
          #stop_scheduler()
          self.job_search.start_search_and_send_unique_vacancy(self.users_requests.get(message.from_user.id), message.from_user.id)
          threads = []
          threads.append(threading.Thread(target=self.job_search.start_search_and_send_workua_vacancy, args=(self.users_requests.get(message.from_user.id),message.from_user.id)))
          threads.append(threading.Thread(target=self.job_search.start_search_and_send_dou_vacancy, args=(self.users_requests.get(message.from_user.id), message.from_user.id)))
          threads.append(threading.Thread(target=self.job_search.start_search_and_send_djinni_vacancy, args=(self.users_requests.get(message.from_user.id), message.from_user.id)))
          threads.append(threading.Thread(target=self.job_search.start_search_and_send_robota_vacancy, args=(self.users_requests.get(message.from_user.id), message.from_user.id)))
          threads.append(threading.Thread(target=self.job_search.start_search_and_send_jooble_vacancy, args=(self.users_requests.get(message.from_user.id), message.from_user.id)))

          for thread in threads:
              thread.start()

          for thread in threads:
              thread.join()
           #start_scheduler()
          self.user_manager.set_stage(message.from_user.id, STAGE.START.value)
          del self.users_requests[message.from_user.id]
        else:
          self.bot.send_message(message.from_user.id, "–¢–∞–∫–∏–π –∑–∞–ø–∏—Ç –≤–∂–µ —ñ—Å–Ω—É—î.")
          self.user_manager.set_stage(message.from_user.id, STAGE.START.value)
          del self.users_requests[message.from_user.id]

